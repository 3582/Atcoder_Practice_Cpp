#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
const long long INF = 1LL << 60; // 十分大きい値

int main()
{
    // 開始時の高度、1秒ごとの高度の増加
    int N;
    cin >> N;
    vector<long long> h(N), s(N);
    for (int i = 0; i < N; i++)
        cin >> h[i] >> s[i];
    // 2
    // 5 6
    // 12 4

    // 二分探索
    long long left = 0, right = INF;
    // 25-0
    // 12-0
    // 12-6
    // 12-9
    // 12-10
    // 12-11 = 1
    while (right - left > 1)
    {
        // (0 + 25) /2 = 12
        // (0 + 12) /2 = 6
        // (6 + 12) /2 = 9
        // (9 + 12) /2 = 10
        // (10 + 12) /2 = 11
        long long mid = (left + right) / 2;

        // 判定
        bool ok = true;
        // 各風船を割るまでの制限時間を列挙
        vector<long long> t(N, 0);
        // 風船の個数
        for (int i = 0; i < N; i++)
        {
            // そもそも mid が各風船の初期高度より低かったら、達成できない高度
            if (mid < h[i])
                ok = false;
            else
                // 風船を高度mid以内に割りたい
                // →割ることが可能な高度を二部探索している

                // 各風船iについて、デッドラインに達するまでの時間を求める
                // t[1] 1.1 = (12 - 5) 7 / 6
                // t[2] 0 = (12 - 12) 0 / 4

                // t[1] 0.1 = (6 - 5) 1 / 6
                // t[2] -1.5 = (6 - 12) -6 / 4

                // t[1] 0.6 = (9 - 5) 4 / 6
                // t[2] -0.7 = (9 - 12) -3 / 4

                // t[1] 0.1 = (10 - 5) 5 / 6
                // t[2] -0.5 = (10 - 12) -2 / 4

                // t[1] 1 = (11 - 5) 6 / 6
                // t[2] -0.2 = (11 - 12) -1 / 4
                t[i] = (mid - h[i]) / s[i];
        }
        // 時間制限がさし迫っている順にソート、0秒目、1秒目...で割る
        sort(t.begin(), t.end());
        for (int i = 0; i < N; i++)
        {
            // デッドラインに達するまでの時間が0秒、1秒、2秒...未満の場合、達成できない高度(時間切れ)
            // t[1] = 0 → 1秒で風船を割るが、デッドラインに0秒で達しているため達成できない高度
            if (t[i] < i)
                ok = false;
        }

        if (ok)
            // 達成可能な高度 → 右端を左にずらすことでデッドラインを低くする
            right = mid;
        else
            // 達成できない高度 → 左端を右にずらすことでデッドラインを高くする
            left = mid;
    }

    cout << right << endl;
}
